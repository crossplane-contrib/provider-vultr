/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageObservation struct {

	// The region ID that you want the network to be created in.
	ClusterID *float64 `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Date of creation for the object storage subscription.
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created,omitempty"`

	// The id of the object storage subscription.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The description you want to give your network.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// The location which this subscription resides in.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The region ID of the object storage subscription.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The hostname for this subscription.
	S3Hostname *string `json:"s3Hostname,omitempty" tf:"s3_hostname,omitempty"`

	// Current status of this object storage subscription.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type StorageParameters struct {

	// The region ID that you want the network to be created in.
	// +kubebuilder:validation:Optional
	ClusterID *float64 `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The description you want to give your network.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`
}

// StorageSpec defines the desired state of Storage
type StorageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageParameters `json:"forProvider"`
}

// StorageStatus defines the observed state of Storage.
type StorageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Storage is the Schema for the Storages API. Provides a Vultr private object storage resource. This can be used to create, read, update and delete object storage resources on your Vultr account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vultr}
type Storage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clusterId)",message="clusterId is a required parameter"
	Spec   StorageSpec   `json:"spec"`
	Status StorageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageList contains a list of Storages
type StorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Storage `json:"items"`
}

// Repository type metadata.
var (
	Storage_Kind             = "Storage"
	Storage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Storage_Kind}.String()
	Storage_KindAPIVersion   = Storage_Kind + "." + CRDGroupVersion.String()
	Storage_GroupVersionKind = CRDGroupVersion.WithKind(Storage_Kind)
)

func init() {
	SchemeBuilder.Register(&Storage{}, &StorageList{})
}
