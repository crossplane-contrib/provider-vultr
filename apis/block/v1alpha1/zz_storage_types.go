/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageObservation struct {

	// VPS ID that is attached to this block storage.
	AttachedToInstance *string `json:"attachedToInstance,omitempty" tf:"attached_to_instance,omitempty"`

	// The type of block storage volume. Values are high_perf or storage_opt.
	BlockType *string `json:"blockType,omitempty" tf:"block_type,omitempty"`

	// The monthly cost of this block storage.
	Cost *float64 `json:"cost,omitempty" tf:"cost,omitempty"`

	// The date this block storage was created.
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created,omitempty"`

	// The ID for this block storage.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Label that is given to your block storage.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Flag which will determine if a volume should be attached with a restart or not.
	Live *bool `json:"live,omitempty" tf:"live,omitempty"`

	// An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
	MountID *string `json:"mountId,omitempty" tf:"mount_id,omitempty"`

	// Region in which this block storage will reside in. (Currently only NJ/NY supported region "ewr")
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The size of the given block storage.
	SizeGb *float64 `json:"sizeGb,omitempty" tf:"size_gb,omitempty"`

	// Current status of your block storage.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type StorageParameters struct {

	// VPS ID that is attached to this block storage.
	// +kubebuilder:validation:Optional
	AttachedToInstance *string `json:"attachedToInstance,omitempty" tf:"attached_to_instance,omitempty"`

	// The type of block storage volume. Values are high_perf or storage_opt.
	// +kubebuilder:validation:Optional
	BlockType *string `json:"blockType,omitempty" tf:"block_type,omitempty"`

	// Label that is given to your block storage.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Flag which will determine if a volume should be attached with a restart or not.
	// +kubebuilder:validation:Optional
	Live *bool `json:"live,omitempty" tf:"live,omitempty"`

	// Region in which this block storage will reside in. (Currently only NJ/NY supported region "ewr")
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The size of the given block storage.
	// +kubebuilder:validation:Optional
	SizeGb *float64 `json:"sizeGb,omitempty" tf:"size_gb,omitempty"`
}

// StorageSpec defines the desired state of Storage
type StorageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageParameters `json:"forProvider"`
}

// StorageStatus defines the observed state of Storage.
type StorageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Storage is the Schema for the Storages API. Provides a Vultr Block Storage resource. This can be used to create, read, modify, and delete Block Storage.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vultr}
type Storage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.region)",message="region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.sizeGb)",message="sizeGb is a required parameter"
	Spec   StorageSpec   `json:"spec"`
	Status StorageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageList contains a list of Storages
type StorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Storage `json:"items"`
}

// Repository type metadata.
var (
	Storage_Kind             = "Storage"
	Storage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Storage_Kind}.String()
	Storage_KindAPIVersion   = Storage_Kind + "." + CRDGroupVersion.String()
	Storage_GroupVersionKind = CRDGroupVersion.WithKind(Storage_Kind)
)

func init() {
	SchemeBuilder.Register(&Storage{}, &StorageList{})
}
