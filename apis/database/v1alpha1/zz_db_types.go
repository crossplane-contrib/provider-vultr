/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DBObservation struct {

	// The managed database ID you want to attach this logical DB to.
	DatabaseID *string `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the new managed database logical DB.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DBParameters struct {

	// The managed database ID you want to attach this logical DB to.
	// +kubebuilder:validation:Optional
	DatabaseID *string `json:"databaseId,omitempty" tf:"database_id,omitempty"`

	// The name of the new managed database logical DB.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// DBSpec defines the desired state of DB
type DBSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DBParameters `json:"forProvider"`
}

// DBStatus defines the observed state of DB.
type DBStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DBObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DB is the Schema for the DBs API. Provides a Vultr database DB resource. This can be used to create, read, and delete logical DBs for a managed database on your Vultr account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vultr}
type DB struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.databaseId)",message="databaseId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   DBSpec   `json:"spec"`
	Status DBStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DBList contains a list of DBs
type DBList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DB `json:"items"`
}

// Repository type metadata.
var (
	DB_Kind             = "DB"
	DB_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DB_Kind}.String()
	DB_KindAPIVersion   = DB_Kind + "." + CRDGroupVersion.String()
	DB_GroupVersionKind = CRDGroupVersion.WithKind(DB_Kind)
)

func init() {
	SchemeBuilder.Register(&DB{}, &DBList{})
}
